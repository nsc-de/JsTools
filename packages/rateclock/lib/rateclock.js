"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.RateClock = void 0;
var _timeoutPromiseWrapper = _interopRequireDefault(require("timeout-promise-wrapper"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class RateClockEntity {
  _promise = Promise.resolve(this);
  constructor(timeout) {
    this.timeout = timeout;
  }
  use() {
    this._promise = (0, _timeoutPromiseWrapper.default)(this.timeout).then(() => this);
    return this._promise;
  }
}

/**
 * Clock making sure we don't get problems with the rate limit
 */
class RateClock {
  entities = [];
  unused = [];
  waiting = [];
  constructor(entityAmount, timeout) {
    this.entityAmount = entityAmount;
    this.timeout = timeout;
    // Create singular clocks
    for (let i = 0; i < entityAmount; i++) this.entities.push(new RateClockEntity(timeout));
    for (let i = 0; i < this.entities.length; i++) this.unused.push(this.entities[i]);
  }
  entityReady(entity) {
    if (this.waiting.length > 0) {
      this.waiting.splice(0, 1)[0]();
      entity.use().then(e => this.entityReady(e));
      return;
    }
    this.unused.push(entity);
  }
  acquire() {
    if (this.unused.length > 0) {
      const clock = this.unused.pop();
      clock.use().then(e => this.entityReady(e));
      return Promise.resolve();
    }
    return new Promise(rs => {
      this.waiting.push(rs);
    });
  }
}
exports.RateClock = RateClock;
var _default = exports.default = RateClock;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfdGltZW91dFByb21pc2VXcmFwcGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIlJhdGVDbG9ja0VudGl0eSIsIl9wcm9taXNlIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjb25zdHJ1Y3RvciIsInRpbWVvdXQiLCJ1c2UiLCJ0aGVuIiwiUmF0ZUNsb2NrIiwiZW50aXRpZXMiLCJ1bnVzZWQiLCJ3YWl0aW5nIiwiZW50aXR5QW1vdW50IiwiaSIsInB1c2giLCJsZW5ndGgiLCJlbnRpdHlSZWFkeSIsImVudGl0eSIsInNwbGljZSIsImUiLCJhY3F1aXJlIiwiY2xvY2siLCJwb3AiLCJycyIsImV4cG9ydHMiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIi4uL3NyYy9yYXRlY2xvY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHRpbWVvdXQgZnJvbSBcInRpbWVvdXQtcHJvbWlzZS13cmFwcGVyXCI7XG5cbmNsYXNzIFJhdGVDbG9ja0VudGl0eSB7XG4gIHByaXZhdGUgX3Byb21pc2U6IFByb21pc2U8UmF0ZUNsb2NrRW50aXR5PiA9IFByb21pc2UucmVzb2x2ZSh0aGlzKTtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgdGltZW91dDogbnVtYmVyKSB7fVxuICB1c2UoKSB7XG4gICAgdGhpcy5fcHJvbWlzZSA9IHRpbWVvdXQodGhpcy50aW1lb3V0KS50aGVuKCgpID0+IHRoaXMpO1xuICAgIHJldHVybiB0aGlzLl9wcm9taXNlO1xuICB9XG59XG5cbi8qKlxuICogQ2xvY2sgbWFraW5nIHN1cmUgd2UgZG9uJ3QgZ2V0IHByb2JsZW1zIHdpdGggdGhlIHJhdGUgbGltaXRcbiAqL1xuZXhwb3J0IGNsYXNzIFJhdGVDbG9jayB7XG4gIHByaXZhdGUgcmVhZG9ubHkgZW50aXRpZXM6IFJhdGVDbG9ja0VudGl0eVtdID0gW107XG4gIHByaXZhdGUgcmVhZG9ubHkgdW51c2VkOiBSYXRlQ2xvY2tFbnRpdHlbXSA9IFtdO1xuICBwcml2YXRlIHJlYWRvbmx5IHdhaXRpbmc6ICgoKSA9PiB2b2lkKVtdID0gW107XG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IGVudGl0eUFtb3VudDogbnVtYmVyLCByZWFkb25seSB0aW1lb3V0OiBudW1iZXIpIHtcbiAgICAvLyBDcmVhdGUgc2luZ3VsYXIgY2xvY2tzXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbnRpdHlBbW91bnQ7IGkrKylcbiAgICAgIHRoaXMuZW50aXRpZXMucHVzaChuZXcgUmF0ZUNsb2NrRW50aXR5KHRpbWVvdXQpKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbnRpdGllcy5sZW5ndGg7IGkrKylcbiAgICAgIHRoaXMudW51c2VkLnB1c2godGhpcy5lbnRpdGllc1tpXSk7XG4gIH1cblxuICBwcml2YXRlIGVudGl0eVJlYWR5KGVudGl0eTogUmF0ZUNsb2NrRW50aXR5KSB7XG4gICAgaWYgKHRoaXMud2FpdGluZy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLndhaXRpbmcuc3BsaWNlKDAsIDEpWzBdKCk7XG4gICAgICBlbnRpdHkudXNlKCkudGhlbigoZSkgPT4gdGhpcy5lbnRpdHlSZWFkeShlKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy51bnVzZWQucHVzaChlbnRpdHkpO1xuICB9XG5cbiAgYWNxdWlyZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAodGhpcy51bnVzZWQubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgY2xvY2sgPSB0aGlzLnVudXNlZC5wb3AoKSE7XG4gICAgICBjbG9jay51c2UoKS50aGVuKChlKSA9PiB0aGlzLmVudGl0eVJlYWR5KGUpKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJzKSA9PiB7XG4gICAgICB0aGlzLndhaXRpbmcucHVzaChycyk7XG4gICAgfSk7XG4gIH1c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